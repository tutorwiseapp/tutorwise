#!/bin/bash
# TutorWise Auto-Startup Configuration
# Loads environment and starts CAS services when entering project directory

# Load environment variables
if [ -f .env.local ]; then
  # Use dotenv if available (direnv), otherwise use set -a
  if command -v dotenv >/dev/null 2>&1; then
    dotenv .env.local
  else
    set -a
    source .env.local
    set +a
  fi
fi

# Configuration
MAX_RETRIES=3
RETRY_DELAY=5
HEALTH_CHECK_TIMEOUT=30

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to send desktop notification (macOS)
send_alert() {
  local title="$1"
  local message="$2"
  local sound="${3:-default}"

  osascript -e "display notification \"$message\" with title \"TutorWise CAS\" subtitle \"$title\" sound name \"$sound\""
}

# Function to check if core services are running
check_core_services() {
  local all_running=true

  # Check frontend (port 3000)
  if ! curl -s http://localhost:3000/api/health >/dev/null 2>&1; then
    all_running=false
  fi

  # Check backend (port 8000)
  if ! curl -s http://localhost:8000/health >/dev/null 2>&1; then
    all_running=false
  fi

  # Check Redis
  if ! docker ps | grep tutorwise-redis | grep -q Up; then
    all_running=false
  fi

  # Check Neo4j
  if ! docker ps | grep tutorwise-neo4j | grep -q Up; then
    all_running=false
  fi

  if [ "$all_running" = true ]; then
    return 0
  else
    return 1
  fi
}

# Function to start services with retry logic
start_services_with_retry() {
  local attempt=1
  local success=false

  while [ $attempt -le $MAX_RETRIES ]; do
    echo -e "${BLUE}üöÄ Starting TutorWise CAS (Attempt $attempt/$MAX_RETRIES)...${NC}"

    # Start services
    npm run cas-startup:start-all >/dev/null 2>&1

    # Wait for services to stabilize
    echo -e "${YELLOW}‚è≥ Waiting for services to start...${NC}"
    sleep $RETRY_DELAY

    # Health check with timeout
    local waited=0
    while [ $waited -lt $HEALTH_CHECK_TIMEOUT ]; do
      if check_core_services; then
        success=true
        break
      fi
      sleep 2
      waited=$((waited + 2))
    done

    if [ "$success" = true ]; then
      echo -e "${GREEN}‚úÖ All core services running successfully!${NC}"
      send_alert "Services Started" "All core services are running" "Glass"
      return 0
    else
      echo -e "${RED}‚ùå Service startup failed (Attempt $attempt/$MAX_RETRIES)${NC}"

      # Show which services failed
      echo -e "${YELLOW}Checking service status...${NC}"
      npm run cas-startup:status 2>/dev/null | grep "‚óã STOPPED" | head -5

      if [ $attempt -lt $MAX_RETRIES ]; then
        echo -e "${YELLOW}‚è≥ Retrying in $RETRY_DELAY seconds...${NC}"
        sleep $RETRY_DELAY
      fi

      attempt=$((attempt + 1))
    fi
  done

  # All retries failed
  echo -e "${RED}‚ùå CRITICAL: Failed to start services after $MAX_RETRIES attempts${NC}"
  send_alert "Startup Failed" "CAS services failed to start after $MAX_RETRIES attempts. Check logs." "Basso"

  # Show detailed status
  echo -e "${YELLOW}üìä Final service status:${NC}"
  npm run cas-startup:status

  # Offer manual recovery options
  echo -e "\n${YELLOW}üîß Manual Recovery Options:${NC}"
  echo "  1. Check logs: tail -f logs/*.log"
  echo "  2. Restart Docker: docker-compose restart"
  echo "  3. Manual start: npm run cas-startup:start-all"
  echo "  4. Check health: npm run cas-startup:status"

  return 1
}

# Main: Only auto-start if services aren't already running
if ! check_core_services; then
  echo -e "${BLUE}üîç Core services not detected. Starting CAS...${NC}"
  start_services_with_retry
else
  echo -e "${GREEN}‚úÖ TutorWise CAS already running${NC}"
  echo -e "${BLUE}üìä Quick status:${NC}"
  echo "  ‚Ä¢ Frontend: http://localhost:3000"
  echo "  ‚Ä¢ Backend:  http://localhost:8000"
  echo "  ‚Ä¢ Run 'cas-status' for full details"
fi

# Export useful aliases for quick access
export TUTORWISE_PROJECT_ROOT="$(pwd)"
alias cas-status='npm run cas-startup:status'
alias cas-restart='npm run cas-startup:restart-all'
alias cas-logs='tail -f logs/*.log'
alias cas-health='curl http://localhost:8000/health | jq'
