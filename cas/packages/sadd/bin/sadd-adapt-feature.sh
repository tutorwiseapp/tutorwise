#!/bin/bash
# SADD Feature Adapter
# Adapts an extracted feature for a target platform using adaptation rules
# Usage: ./sadd-adapt-feature.sh <feature-package-dir> <target-platform>

set -e

PACKAGE_DIR=$1
TARGET_PLATFORM=${2:-"vinite"}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Validation
if [ -z "$PACKAGE_DIR" ]; then
  echo -e "${RED}‚ùå Error: Feature package directory required${NC}"
  echo "Usage: $0 <feature-package-dir> [target-platform]"
  echo ""
  echo "Example:"
  echo "  $0 /tmp/sadd-extracts/radix-ui-components-v1.2.0 vinite"
  exit 1
fi

# Handle relative paths
if [[ "$PACKAGE_DIR" != /* ]]; then
  PACKAGE_DIR="/tmp/sadd-extracts/$PACKAGE_DIR"
fi

if [ ! -d "$PACKAGE_DIR" ]; then
  echo -e "${RED}‚ùå Error: Package directory not found: $PACKAGE_DIR${NC}"
  exit 1
fi

METADATA="$PACKAGE_DIR/sadd-extract-metadata.json"
if [ ! -f "$METADATA" ]; then
  echo -e "${RED}‚ùå Error: Metadata file not found: $METADATA${NC}"
  echo "This doesn't appear to be a valid SADD feature package."
  exit 1
fi

# Read metadata
FEATURE_NAME=$(jq -r '.feature' "$METADATA")
VERSION=$(jq -r '.version' "$METADATA")
ADAPTATIONS=$(jq -r '.adaptations_required[]' "$METADATA" 2>/dev/null || echo "")

echo -e "${BLUE}üîÑ MADS Feature Adapter${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}‚úì${NC} Feature: $FEATURE_NAME"
echo -e "${GREEN}‚úì${NC} Version: $VERSION"
echo -e "${GREEN}‚úì${NC} Target platform: $TARGET_PLATFORM"
echo ""

if [ -n "$ADAPTATIONS" ]; then
  echo -e "${YELLOW}üìù Required adaptations:${NC}"
  echo "$ADAPTATIONS" | sed 's/^/  ‚Ä¢ /'
  echo ""
fi

# Look for platform-specific adaptation rules
RULES_FILE="$SCRIPT_DIR/../adaptations/${TARGET_PLATFORM}-$FEATURE_NAME.rules.json"

if [ -f "$RULES_FILE" ]; then
  echo -e "${GREEN}‚úÖ Adaptation rules found:${NC} $(basename "$RULES_FILE")"
  echo -e "${BLUE}ü§ñ Applying automated adaptations...${NC}"
  echo ""

  # Apply adaptations using Node.js automation engine
  node "$SCRIPT_DIR/../src/sadd-apply-adaptations.js" "$PACKAGE_DIR" "$RULES_FILE" "$TARGET_PLATFORM"

  echo ""
  echo -e "${GREEN}‚úì${NC} Automated adaptations applied"
else
  echo -e "${YELLOW}‚ö†Ô∏è  No adaptation rules found:${NC} $RULES_FILE"
  echo -e "${YELLOW}üí° Manual adaptation required${NC}"
  echo ""
  echo -e "${BLUE}To create adaptation rules:${NC}"
  echo "  1. Create: $RULES_FILE"
  echo "  2. See docs/MADS-MULTIPLE-APP-DEVELOPMENT-SYSTEM.md for examples"
fi

# Create adapted package directory
ADAPTED_DIR="$PACKAGE_DIR-$TARGET_PLATFORM-adapted"
echo -e "${BLUE}üì¶ Creating adapted package...${NC}"

# Remove old adapted package if exists
rm -rf "$ADAPTED_DIR"
cp -r "$PACKAGE_DIR" "$ADAPTED_DIR"

# Update metadata in adapted package
cat > "$ADAPTED_DIR/sadd-adapt-metadata.json" <<EOF
{
  "feature": "$FEATURE_NAME",
  "source_version": "$VERSION",
  "target_platform": "$TARGET_PLATFORM",
  "adapted_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "adapted_by": "sadd-adapt-feature.sh",
  "rules_file": "$([ -f "$RULES_FILE" ] && echo "$(basename "$RULES_FILE")" || echo "none (manual)")",
  "automation_applied": $([ -f "$RULES_FILE" ] && echo "true" || echo "false"),
  "source_package": "$(basename "$PACKAGE_DIR")"
}
EOF

# Create adaptation notes
cat > "$ADAPTED_DIR/ADAPTATION-NOTES.md" <<EOF
# Adaptation Notes: $FEATURE_NAME ‚Üí $TARGET_PLATFORM

**Feature:** $FEATURE_NAME v$VERSION
**Target Platform:** $TARGET_PLATFORM
**Adapted:** $(date -u +%Y-%m-%d %H:%M:%S UTC)

## Automated Adaptations

$(if [ -f "$RULES_FILE" ]; then
  echo "‚úÖ Applied adaptation rules from: \`$(basename "$RULES_FILE")\`"
  echo ""
  echo "See \`sadd-adapt-metadata.json\` for details."
else
  echo "‚ö†Ô∏è  No automation rules found. Manual adaptation required."
fi)

## Manual Review Checklist

$(if [ -n "$ADAPTATIONS" ]; then
  echo "$ADAPTATIONS" | sed 's/^/- [ ] /'
else
  echo "- [ ] Review all files for platform-specific code"
  echo "- [ ] Update imports if needed"
  echo "- [ ] Test in target platform"
fi)

## Files Included

\`\`\`
$(find . -type f -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | grep -v "sadd-" | grep -v "ADAPTATION-NOTES" | sed 's/^//')
\`\`\`

## Next Steps

1. ‚úÖ Review this file and check off manual adaptations
2. ‚úÖ Test files in isolation if possible
3. ‚úÖ Apply to $TARGET_PLATFORM repo:
   \`\`\`bash
   ./tools/sadd/sadd-apply-feature.sh $(basename "$ADAPTED_DIR") /path/to/$TARGET_PLATFORM
   \`\`\`

---
*Generated by SADD (Software Application Discovery and Development)*
EOF

echo ""
echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}‚úÖ Adaptation complete!${NC}"
echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""
echo -e "${BLUE}üì¶ Adapted package:${NC} $(basename "$ADAPTED_DIR")"
echo -e "${BLUE}üìç Location:${NC} $ADAPTED_DIR"
echo ""
echo -e "${YELLOW}üìã Next steps:${NC}"
echo -e "  1. Review: ${BLUE}cd $ADAPTED_DIR && cat ADAPTATION-NOTES.md${NC}"
echo -e "  2. Apply:  ${BLUE}./tools/sadd/sadd-apply-feature.sh $(basename "$ADAPTED_DIR") /path/to/$TARGET_PLATFORM${NC}"
echo ""
