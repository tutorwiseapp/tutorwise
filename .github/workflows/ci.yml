name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22.x'
  PYTHON_VERSION: '3.8'

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Run unit tests
      run: npm run test:unit:coverage

    - name: Run integration tests
      run: npm run test:integration

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install backend dependencies
      working-directory: ./tutorwise-railway-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint backend code
      run: npm run lint:backend

    - name: Run backend tests
      run: npm run test:backend:coverage
      env:
        REDIS_URL: redis://localhost:6379

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./tutorwise-railway-backend/htmlcov/coverage.xml
        flags: backend
        name: backend-coverage

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        SKIP_ENV_VALIDATION: true

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/main' || contains(github.event.head_commit.modified, 'tests/e2e')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Run E2E tests
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-results
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, build-check, security-scan]
    if: always()

    steps:
    - name: Check quality gate
      run: |
        if [[ "${{ needs.frontend-tests.result }}" == "failure" ||
              "${{ needs.backend-tests.result }}" == "failure" ||
              "${{ needs.build-check.result }}" == "failure" ||
              "${{ needs.security-scan.result }}" == "failure" ]]; then
          echo "Quality gate failed"
          exit 1
        else
          echo "Quality gate passed"
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ needs.frontend-tests.result }}' === 'success' &&
                        '${{ needs.backend-tests.result }}' === 'success' &&
                        '${{ needs.build-check.result }}' === 'success' &&
                        '${{ needs.security-scan.result }}' === 'success' ? '✅' : '❌';

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ${status} CI Pipeline Results

            **Frontend Tests**: ${{ needs.frontend-tests.result }}
            **Backend Tests**: ${{ needs.backend-tests.result }}
            **Build Check**: ${{ needs.build-check.result }}
            **Security Scan**: ${{ needs.security-scan.result }}
            ${needs.e2e-tests.result ? '**E2E Tests**: ' + '${{ needs.e2e-tests.result }}' : ''}

            ${status === '✅' ? 'Ready for deployment!' : 'Please fix issues before merging.'}
            `
          });